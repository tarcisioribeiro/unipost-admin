import streamlit as st
import pandas as pd
from texts.request import TextsRequest
from dictionary.vars import PLATFORMS
from services.embeddings_service import EmbeddingsService
from services.redis_service import RedisService
from services.text_generation_service import TextGenerationService
import logging

logger = logging.getLogger(__name__)


class Texts:
    """
    Classe que representa os m√©todos referentes √† gera√ß√£o de post natural.
    Implementa o fluxo completo conforme nova arquitetura:
    - Busca de embeddings via API externa
    - Armazenamento no Redis
    - Interface para input do usu√°rio
    - Elabora√ß√£o de prompt com refer√™ncias
    - Gera√ß√£o de post via LLM
    """

    def __init__(self):
        self.embeddings_service = EmbeddingsService()
        self.redis_service = RedisService()
        self.text_service = TextGenerationService()

    def treat_texts_dataframe(self, texts_data):
        """
        Realiza o tratamento e formata√ß√£o dos dados referentes aos posts.

        Parameters
        ----------
        texts_data : list
            A s√©rie de dados referentes aos posts gerados.

        Returns
        -------
        df : DataFrame
            A s√©rie de dados tratados.
        """

        df = pd.DataFrame(texts_data)
        df = df.drop(columns=['id'])

        # Mapear campos da API para campos esperados pelo frontend
        if 'content' in df.columns and 'generated_text' not in df.columns:
            df['generated_text'] = df['content']

        # Mapear status baseado no campo is_approved da API
        if 'is_approved' in df.columns and 'status' not in df.columns:
            df['status'] = df['is_approved'].apply(
                lambda x: 'approved' if x else 'pending_approval')

        df = df.rename(
            columns={
                'theme': 'Tema',
                'generated_text': 'Post Gerado',
                'created_at': 'Data de Cria√ß√£o',
                'status': 'Status',
            }
        )

        df = df[[
            "Tema",
            "Post Gerado",
            "Data de Cria√ß√£o",
            "Status",
        ]
        ]

        df = df.sort_values(
            by="Data de Cria√ß√£o",
            ascending=False
        )

        return df

    def get_texts_index(self, texts):
        """
        Obt√©m o √≠ndice dos posts, com seus temas e identificadores.

        Parameters
        ----------
        texts : dict
            Dicion√°rio com os dados dos posts.

        Returns
        -------
        texts_index : dict
            Dicion√°rio com os √≠ndices.
        """
        texts_topics = []
        texts_ids = []

        for text in texts:
            texts_topics.append(text['theme'])
            texts_ids.append(text['id'])

        texts_index = dict(zip(texts_topics, texts_ids))

        return texts_index

    def validate_topic(self, topic):
        """
        Valida o tema informado (vers√£o simplificada sem st.error visual).

        Parameters
        ----------
        topic : str
            O tema para gera√ß√£o de post.

        Returns
        -------
        bool
            se o tema informado √© ou n√£o v√°lido.
        str
            O tema validado.
        """
        if not topic or len(topic.strip()) < 5:
            return False, topic

        if len(topic.strip()) > 500:
            return False, topic

        return True, topic.strip()

    def _process_text_generation_improved(
            self,
            user_topic: str,
            search_query: str,
            platform: str,
            tone: str,
            creativity_level: str,
            length: str,
            include_hashtags: bool,
            include_cta: bool,
            token: str,
            result_container):
        """
        Processa a gera√ß√£o completa de post seguindo o fluxo do roadmap.

        Parameters n√£o utilizados mantidos para compatibilidade futura:
        - include_hashtags: bool
        - include_cta: bool
        """
        # Par√¢metros mantidos para futura implementa√ß√£o
        _ = include_hashtags, include_cta
        # Interface de progresso simplificada
        with result_container.container():
            # Cabe√ßalho do processo
            st.header("üöÄ Gerando Post")
            st.info("Processando...")

            # Container para progresso
            progress_container = st.container()
            with progress_container:
                progress_bar = st.progress(0)
                status_text = st.empty()

        try:
            # 1. Verificar cache Redis
            status_text.info("üîç Verificando cache...")
            progress_bar.progress(10)

            cached_embeddings = self.redis_service.get_cached_embeddings(
                search_query
            )

            if cached_embeddings:
                similar_texts = cached_embeddings.get('similar_texts', [])
                status_text.success("‚úÖ Cache encontrado")
            else:
                # 2. Busca via API de embeddings (por palavras individuais)
                status_text.text("üîç Buscando refer√™ncias...")
                progress_bar.progress(30)

                # Consultar por palavras individuais
                embeddings_by_word = self.embeddings_service.query_embeddings_by_individual_words(  # noqa: E501
                    search_query
                )

                # Agregar todos os resultados para manter compatibilidade
                raw_texts = []
                for _, word_embeddings in embeddings_by_word.items():
                    raw_texts.extend(word_embeddings)

                # Remover duplicatas baseado no ID
                seen_ids = set()
                unique_texts = []
                for text in raw_texts:
                    text_id = text.get('id', str(hash(str(text))))
                    if text_id not in seen_ids:
                        seen_ids.add(text_id)
                        unique_texts.append(text)

                raw_texts = unique_texts

                # Permite gera√ß√£o mesmo sem resultados da API
                if raw_texts:
                    # 3. Tratamento dos textos da API
                    status_text.text("‚öôÔ∏è Processando textos...")
                    progress_bar.progress(50)

                    texts = self.text_service.treat_text_content(raw_texts)

                    if texts:
                        # 4. Busca de textos similares via API
                        status_text.text("üéØ Analisando similaridade...")
                        progress_bar.progress(70)

                        similar_texts = (
                            self.text_service.find_similar_texts_via_api(
                                user_topic,
                                texts
                            )
                        )

                        # 5. Cache no Redis
                        if similar_texts:
                            self.redis_service.cache_embeddings(
                                search_query, {'similar_texts': similar_texts})

                            # Simples confirma√ß√£o de refer√™ncias encontradas
                            count = len(similar_texts)
                            msg = f"‚úÖ {count} refer√™ncias encontradas"
                            status_text.success(msg)
                        else:
                            st.toast(
                                "Nenhuma refer√™ncia encontrada",
                                icon="‚ÑπÔ∏è"
                            )
                            similar_texts = []
                    else:
                        st.toast(
                            "Textos inv√°lidos, prosseguindo sem refer√™ncias",
                            icon="‚ö†Ô∏è"
                        )
                        similar_texts = []
                else:
                    st.toast("Nenhuma refer√™ncia encontrada", icon="‚ÑπÔ∏è")
                    similar_texts = []

            # 6. Elabora√ß√£o do contexto de prompt com novos par√¢metros
            status_text.text("üìù Preparando prompt...")
            progress_bar.progress(80)

            prompt_context = self.text_service.create_prompt_context(
                user_topic,
                similar_texts,
                platform,
                tone,
                creativity_level,
                length
            )

            # 7. Gera√ß√£o de post via OpenAI/LLM
            status_text.text("ü§ñ Gerando post...")
            progress_bar.progress(90)

            generated_text = self.text_service.generate_text_via_llm(
                prompt_context
            )
            if not generated_text:
                st.toast("Erro na gera√ß√£o de post via IA", icon="‚ùå")
                return

            # 8. Salvar no banco de dados da API UniPost (SEM EMBEDDING)
            status_text.text("üíæ Salvando post...")
            progress_bar.progress(95)

            text_data = {
                "theme": user_topic,
                "platform": platform if platform else "GENERIC",
                "content": generated_text,
                "is_approved": False
            }

            # Registrar na API do projeto unipost-api
            try:
                send_result = TextsRequest().create_text(
                    token=token,
                    text_data=text_data
                )
                logger.info(
                    f"Text successfully registered in API: {send_result}")

                # Armazenar o ID do texto para usar nos bot√µes de aprova√ß√£o
                created_text_id = send_result.get("text_id")

            except Exception as api_error:
                logger.error(f"Error registering in API: {api_error}")
                send_result = {
                    "success": False,
                    "message": f"""‚ùå **Erro ao registrar na API**: {
                        str(api_error)
                    }""",
                    "text_id": None
                }
                created_text_id = None

            progress_bar.progress(100)
            status_text.text("‚úÖ Post salvo")

            # Processamento conclu√≠do

            # Limpar barra de progresso antes de mostrar resultado
            progress_bar.empty()
            status_text.empty()

            # Exibir resultado na √°rea direita
            with result_container.container():
                st.toast("Post Gerado com Sucesso!", icon="‚úÖ")

                # Informa√ß√µes dos par√¢metros
                platform_name = (PLATFORMS.get(platform, 'Gen√©rico')
                                 if platform else 'Gen√©rico')

                # Contar palavras do post gerado
                word_count = len(
                    generated_text.split()
                ) if generated_text else 0
                target_count = self.text_service.extract_word_count(length)

                # Mostrar informa√ß√µes em formato nativo
                st.info(f"""
                üì± **Plataforma:** {platform_name}
                üìù **Tom:** {tone.title()}
                üé® **Criatividade:** {creativity_level.title()}
                üìè **Tamanho:** {length}
                üìö **Refer√™ncias:** {len(similar_texts)}
                üìä **Palavras:** {word_count} (alvo: {target_count})
                """)

                # Post gerado principal
                with st.container():
                    st.markdown("**üìÑ Post Gerado:**")
                    st.markdown(generated_text)

                # Se√ß√£o de a√ß√µes
                st.subheader("üéõÔ∏è A√ß√µes Dispon√≠veis")

                col_approve, col_reject, col_regenerate = st.columns(3)

                # Bot√£o Aprovar - Gerar embedding quando aprovado
                with col_approve:
                    if st.button(
                        "‚úÖ Aprovar Post",
                        key="approve_generated",
                        use_container_width=True,
                        type="primary",
                        help="Aprovar post"
                    ):
                        # Aprovar post e gerar embedding
                        if created_text_id:
                            with st.spinner(
                                "Aprovando post..."
                            ):
                                approval_result = TextsRequest().approve_and_generate_embedding(  # noqa: E501
                                    token,
                                    created_text_id,
                                    generated_text,
                                    user_topic
                                )
                            st.toast(approval_result, icon="‚úÖ")

                            if 'last_generated' in st.session_state:
                                st.session_state[
                                    'last_generated'
                                ]['approved'] = True
                            st.rerun()
                        else:
                            st.toast(
                                "Erro: ID do texto n√£o encontrado",
                                icon="‚ùå"
                            )

                # Bot√£o Reprovar
                with col_reject:
                    if st.button(
                        "‚ùå Reprovar",
                        key="reject_generated",
                        use_container_width=True,
                        type="secondary",
                        help="Reprovar post"
                    ):
                        # Reprovar post
                        if created_text_id:
                            with st.spinner("Reprovando post..."):
                                rejection_result = TextsRequest().reject_text(
                                    token, created_text_id
                                )
                            st.toast(rejection_result, icon="‚ùå")

                            if 'last_generated' in st.session_state:
                                st.session_state[
                                    'last_generated'
                                ]['approved'] = False
                            st.rerun()
                        else:
                            st.toast(
                                "Erro: ID do texto n√£o encontrado",
                                icon="‚ùå"
                            )

                # Bot√£o Regenerar (sempre ativo)
                with col_regenerate:
                    if st.button(
                        "üîÑ Regenerar",
                        key="regenerate_generated",
                        use_container_width=True,
                        type="secondary",
                        help="Regenerar post"
                    ):
                        # Preparar dados para regenera√ß√£o
                        if 'last_generated' in st.session_state:
                            last_data = st.session_state['last_generated']
                            st.session_state.regenerate_text_data = {
                                'theme': last_data.get('theme', ''),
                                'platform': platform,
                                'tone': tone,
                                'creativity': creativity_level,
                                'length': length
                            }
                            del st.session_state['last_generated']

                        st.toast("Regenerando post...", icon="üîÑ")
                        st.rerun()

                # Mostrar resultado do registro na API
                if send_result.get("success"):
                    import time
                    st.toast("‚úÖ Texto gerado com sucesso", icon="‚úÖ")
                    time.sleep(2.5)
                else:
                    st.error(
                        f"""üö® Erro no registro: {
                            send_result.get('message', 'Erro desconhecido')
                        }"""
                    )

                # Salvar na sess√£o com ID do post criado
                st.session_state['last_generated'] = {
                    'text': generated_text,
                    'platform': platform_name,
                    'tone': tone,
                    'creativity': creativity_level,
                    'length': length,
                    'text_data': text_data,  # Dados enviados para API
                    'approved': False,  # Texto criado sem aprova√ß√£o inicial
                    'theme': user_topic
                }

        except Exception as e:
            st.toast(f"Erro durante o processamento: {e}", icon="‚ùå")
            logger.error(f"Error in text generation process: {e}")

        finally:
            # Garantir limpeza dos elementos de progresso
            try:
                progress_bar.empty()
                status_text.empty()
            except Exception:
                pass  # Elementos podem j√° ter sido removidos

    def create(self, token, menu_position, permissions):
        # menu_position n√£o utilizado nesta fun√ß√£o
        _ = menu_position
        """
        Gera um novo post usando IA.

        Parameters
        ----------
        token : str
            O token obtido e passado para a valida√ß√£o da requisi√ß√£o.
        menu_position : Any
            A posi√ß√£o do menu superior.
        permissions : list
            A lista de permiss√µes do usu√°rio.
        """
        # Limpar dados de post anterior ao acessar a tela
        if 'last_generated' in st.session_state:
            del st.session_state['last_generated']

        # Exibir status dos servi√ßos no menu
        if 'create' in permissions:

            # Layout principal: Par√¢metros | Resultado
            # Novos campos obrigat√≥rios
            col_params, col_result = st.columns([1.0, 1.2])

            with col_params:
                # Cabe√ßalho da se√ß√£o de par√¢metros
                st.header("üé® Par√¢metros de Gera√ß√£o")

                # Verificar se h√° dados de regenera√ß√£o salvos
                regenerate_data = st.session_state.get(
                    'regenerate_text_data',
                    {}
                )
                default_theme = regenerate_data.get('theme', '')

                # Mostrar aviso se for regenera√ß√£o
                if regenerate_data:
                    st.info(
                        "üîÑ **Modo Regenera√ß√£o**: Tema carregado " +
                        "automaticamente do post selecionado."
                    )

                # T√≠tulo para o campo tema
                st.markdown("**üéØ Tema do post**")
                st.caption("Seja espec√≠fico, use palavras-chave relevantes")

                text_topic = st.text_area(
                    label="",
                    value=default_theme,
                    max_chars=500,
                    placeholder="Ex: Benef√≠cios da energia renov√°vel",
                    help="Tema para o post",
                    height=120,
                    key="topic_input",
                    label_visibility="collapsed"
                )

                # Organizar campos lado a lado
                col_plat, col_tone = st.columns(2)

                with col_plat:
                    # Sele√ß√£o de plataforma
                    platform_options = list(PLATFORMS.keys())
                    platform_display = {
                        k: f"{v}" for k,
                        v in PLATFORMS.items()}

                    selected_platform = st.selectbox(
                        "üì± Plataforma de destino",
                        platform_options,
                        format_func=(
                            lambda x: platform_display.get(x, x)
                        ),  # type: ignore
                        help="Plataforma de destino",
                        key="platform_input"
                    )  # type: ignore

                with col_tone:
                    # Tom da linguagem (otimizado sem duplica√ß√µes)
                    tone_options = [
                        "informal",
                        "formal",
                        "educativo",
                        "t√©cnico",
                        "inspiracional"
                    ]
                    selected_tone = st.selectbox(
                        "üìù Tom da linguagem",
                        tone_options,
                        index=0,
                        help="Tom do conte√∫do",
                        key="tone_input")

                # Segunda linha de campos emparelhados
                col_length, col_creativity = st.columns(2)

                with col_length:
                    selected_word_count = st.slider(
                        "üìè Quantidade de palavras",
                        min_value=50,
                        max_value=800,
                        value=300,
                        step=25,
                        help="N√∫mero de palavras",
                        key="word_count_input"
                    )
                    # Converter para formato esperado pelo backend
                    selected_length = f"Exato ({selected_word_count} palavras)"

                with col_creativity:
                    selected_creativity = st.selectbox(
                        "üé® N√≠vel de criatividade",
                        [
                            "conservador",
                            "equilibrado",
                            "criativo",
                            "inovador"
                        ],
                        index=1,
                        help="N√≠vel de criatividade",
                        key="creativity_input")

                # Terceira linha de configura√ß√µes adicionais
                col_hashtags, col_cta = st.columns(2)

                with col_hashtags:
                    include_hashtags = st.checkbox(
                        "#Ô∏è‚É£ Incluir hashtags",
                        value=True,
                        help="Incluir hashtags"
                    )

                with col_cta:
                    include_cta = st.checkbox(
                        "üì¢ Incluir call-to-action",
                        value=False,
                        help="Incluir CTA"
                    )

                # Bot√£o de gera√ß√£o
                generate_button = st.button(
                    "üöÄ Gerar Post com IA",
                    use_container_width=True,
                    type="primary",
                    key="generate_btn",
                    help="Gerar post"
                )

            # √Årea de resultado
            with col_result:
                # Cabe√ßalho da se√ß√£o de resultado
                st.header("üìÑ Resultado da Gera√ß√£o")

                result_container = st.container()

                # Estado inicial limpo
                if not generate_button:
                    with result_container:
                        st.info("""
                        ü§ñ **Aguardando Gera√ß√£o**

                        Configure os par√¢metros e clique em **"üöÄ Gerar Post"**.
                        """)

            # Processar gera√ß√£o se bot√£o foi clicado
            if generate_button:
                # Marcar como gerando
                st.session_state.generating = True

                # Valida√ß√£o com feedback visual melhorado
                if not text_topic or not text_topic.strip():
                    st.session_state.generating = False
                    st.error("Preencha o tema do post")
                elif len(text_topic.strip()) < 5:
                    st.session_state.generating = False
                    st.warning("Tema muito curto (m√≠n. 5 caracteres)")
                elif len(text_topic.strip()) > 500:
                    st.session_state.generating = False
                    st.error("Tema muito longo (m√°x. 500 caracteres)")
                else:
                    # Valida√ß√£o passou - processar gera√ß√£o
                    query = text_topic.strip()
                    platform_code = selected_platform if (
                        selected_platform != "GENERIC"
                    ) else ""

                    try:
                        self._process_text_generation_improved(
                            text_topic.strip(),
                            query,
                            platform_code,
                            selected_tone,
                            selected_creativity,
                            selected_length,
                            include_hashtags,
                            include_cta,
                            token,
                            result_container
                        )
                    finally:
                        # Sempre limpar o estado de gera√ß√£o
                        st.session_state.generating = False

        elif 'create' not in permissions:
            st.warning("""
            **üîí Acesso Restrito**

            Sem permiss√£o para gerar posts.
            """)

    def render(self, token, menu_position, permissions):
        # menu_position n√£o utilizado nesta fun√ß√£o
        _ = menu_position
        """
        Interface para renderiza√ß√£o dos posts gerados.

        Parameters
        ----------
        token : str
            O token utilizado no envio da requisi√ß√£o.
        menu_position : Any
            posi√ß√£o do menu superior com a listagem dos posts.
        permissions : list
            Lista contendo as permiss√µes do usu√°rio.
        """
        if 'read' in permissions:

            texts = TextsRequest().get_texts(token)

            if not texts:
                st.empty()
                col1, col2, col3 = st.columns([1, 2, 1])
                with col2:
                    st.info("""
                    **üìÑ Biblioteca Vazia**

                    Nenhum post foi encontrado. Que tal criar seu primeiro post?

                    üëâ V√° para **"üöÄ Gerar Novo Post"** no menu acima.
                    """)
                return

            # Cabe√ßalho da biblioteca
            st.header("üìö Biblioteca de Posts")
            st.caption("Gerencie e visualize todos os posts criados com IA")

            # Barra de filtros melhorada
            col_filter1, col_filter2, col_filter3, col_filter4 = st.columns([3, 2, 2, 1])

            with col_filter1:
                search_text = st.text_input(
                    "üîç Buscar por tema ou conte√∫do",
                    placeholder="Digite palavras-chave para buscar...",
                    help="Busque por tema ou conte√∫do do post"
                )

            with col_filter2:
                status_filter = st.selectbox(
                    "üìä Filtrar por Status",
                    ["Todos", "‚úÖ Aprovados", "‚è≥ Pendentes"],
                    index=0,
                    help="Filtrar posts por status de aprova√ß√£o"
                )

            with col_filter3:
                sort_options = ["üìÖ Mais Recentes", "üìÖ Mais Antigos", "üìù Mais Palavras", "üìù Menos Palavras"]
                sort_option = st.selectbox(
                    "üîÑ Ordenar por",
                    sort_options,
                    index=0,
                    help="Escolha como ordenar os posts"
                )

            with col_filter4:
                posts_per_page = st.selectbox(
                    "üìÑ Por p√°gina",
                    [5, 10, 20, 50],
                    index=1,
                    help="Quantidade de posts por p√°gina"
                )

            # Aplicar filtros
            filtered_texts = texts
            if status_filter == "‚úÖ Aprovados":
                filtered_texts = [t for t in filtered_texts if t.get('is_approved', False)]
            elif status_filter == "‚è≥ Pendentes":
                filtered_texts = [t for t in filtered_texts if not t.get('is_approved', False)]

            if search_text:
                search_lower = search_text.lower()
                filtered_texts = [
                    t for t in filtered_texts
                    if search_lower in t.get('theme', '').lower() or
                       search_lower in t.get('content', t.get('generated_text', '')).lower()
                ]

            # Aplicar ordena√ß√£o
            if sort_option == "üìÖ Mais Antigos":
                filtered_texts.sort(key=lambda x: x.get('created_at', ''), reverse=False)
            elif sort_option == "üìù Mais Palavras":
                filtered_texts.sort(key=lambda x: len(x.get('content', x.get('generated_text', '')).split()), reverse=True)
            elif sort_option == "üìù Menos Palavras":
                filtered_texts.sort(key=lambda x: len(x.get('content', x.get('generated_text', '')).split()), reverse=False)
            else:  # Mais recentes (padr√£o)
                filtered_texts.sort(key=lambda x: x.get('created_at', ''), reverse=True)

            if not filtered_texts:
                st.info("üîç Nenhum post encontrado com os filtros aplicados")
                return

            # Estat√≠sticas resumidas
            total_approved = len([t for t in filtered_texts if t.get('is_approved', False)])
            total_pending = len(filtered_texts) - total_approved

            col_stats1, col_stats2, col_stats3, col_stats4 = st.columns(4)
            with col_stats1:
                st.metric("üìÑ Total Encontrados", len(filtered_texts))
            with col_stats2:
                st.metric("‚úÖ Aprovados", total_approved)
            with col_stats3:
                st.metric("‚è≥ Pendentes", total_pending)
            with col_stats4:
                approval_rate = (total_approved / len(filtered_texts) * 100) if filtered_texts else 0
                st.metric("üìä Taxa Aprova√ß√£o", f"{approval_rate:.0f}%")

            st.divider()

            # Pagina√ß√£o
            total_posts = len(filtered_texts)
            total_pages = (total_posts - 1) // posts_per_page + 1 if total_posts > 0 else 1

            if total_pages > 1:
                col_pagination1, col_pagination2, col_pagination3 = st.columns([1, 2, 1])
                with col_pagination2:
                    current_page = st.selectbox(
                        f"üìÑ P√°gina ({total_pages} p√°ginas)",
                        range(1, total_pages + 1),
                        index=0,
                        format_func=lambda x: f"P√°gina {x} de {total_pages}"
                    )
            else:
                current_page = 1

            # Calcular posts da p√°gina atual
            start_idx = (current_page - 1) * posts_per_page
            end_idx = start_idx + posts_per_page
            posts_to_show = filtered_texts[start_idx:end_idx]

            # Exibir posts com design melhorado
            for i, text in enumerate(posts_to_show):
                is_approved = text.get('is_approved', False)
                status_emoji = '‚úÖ' if is_approved else '‚è≥'
                status_color = 'success' if is_approved else 'warning'

                # Formata√ß√£o da data melhorada
                created_date = text.get('created_at', 'N/A')
                if created_date != 'N/A' and len(created_date) >= 10:
                    try:
                        from datetime import datetime
                        date_obj = datetime.strptime(created_date[:10], '%Y-%m-%d')
                        formatted_date = date_obj.strftime('%d/%m/%Y')
                        time_part = created_date[11:16] if len(created_date) > 16 else ''
                        full_date = f"{formatted_date} {time_part}".strip()
                    except Exception:
                        full_date = created_date[:16] if len(created_date) >= 16 else created_date
                else:
                    full_date = 'Data n√£o dispon√≠vel'

                theme_display = text.get('theme', 'Sem t√≠tulo')
                content_text = text.get('content', text.get('generated_text', ''))
                word_count = len(content_text.split()) if content_text else 0
                char_count = len(content_text) if content_text else 0
                platform_name = PLATFORMS.get(text.get('platform', 'N/A'), 'Gen√©rico')

                # Preview do conte√∫do (primeiras 150 caracteres)
                content_preview = content_text[:150] + "..." if len(content_text) > 150 else content_text

                # Container principal do post com design de card
                text_id = text.get('id')

                # Usar container com borda
                with st.container():
                    # Cabe√ßalho do card
                    col_header, col_status = st.columns([4, 1])

                    with col_header:
                        st.markdown(f"### {status_emoji} {theme_display}")

                    with col_status:
                        if is_approved:
                            st.success("Aprovado")
                        else:
                            st.warning("Pendente")

                    # Informa√ß√µes do post
                    col_info1, col_info2, col_info3, col_info4 = st.columns(4)

                    with col_info1:
                        st.metric("üìÖ Data", full_date[:10])

                    with col_info2:
                        st.metric("üì± Plataforma", platform_name)

                    with col_info3:
                        st.metric("üìù Palavras", word_count)

                    with col_info4:
                        st.metric("üìä Caracteres", char_count)

                    # Preview do conte√∫do
                    st.markdown("**üìÑ Preview do Conte√∫do:**")
                    st.markdown(f"*{content_preview}*")

                    # Layout de a√ß√µes
                    col_text, col_actions = st.columns([3, 1])

                    # Coluna esquerda: visualiza√ß√£o completa do texto
                    with col_text:
                        with st.expander("üëÅÔ∏è Ver Texto Completo", expanded=False):
                            st.text_area(
                                "Conte√∫do completo do post:",
                                value=content_text,
                                height=250,
                                label_visibility="collapsed",
                                key=f"post_text_{text_id}_{i}_{current_page}"
                            )

                    # Coluna direita: bot√µes de a√ß√£o
                    with col_actions:
                        st.markdown("**üéõÔ∏è A√ß√µes:**")

                        if not is_approved and 'update' in permissions:
                            if st.button(
                                "‚úÖ Aprovar",
                                key=f"approve_{text_id}_{i}_{current_page}",
                                help="Aprovar este post",
                                use_container_width=True,
                                type="primary"
                            ):
                                with st.spinner("Aprovando post..."):
                                    text_content = text.get('content', '')
                                    text_theme = text.get('theme', '')
                                    result = TextsRequest().approve_and_generate_embedding(
                                        token, text_id, text_content, text_theme
                                    )
                                st.toast(result, icon="‚úÖ")
                                st.rerun()

                        elif is_approved and 'update' in permissions:
                            if st.button(
                                "‚ùå Reprovar",
                                key=f"reject_{text_id}_{i}_{current_page}",
                                help="Reprovar este post",
                                use_container_width=True,
                                type="secondary"
                            ):
                                with st.spinner("Reprovando post..."):
                                    result = TextsRequest().reject_text(token, text_id)
                                st.toast(result, icon="‚ùå")
                                st.rerun()

                        if 'create' in permissions:
                            if st.button(
                                "üîÑ Regenerar",
                                key=f"regenerate_{text_id}_{i}_{current_page}",
                                help="Regenerar post baseado neste tema",
                                use_container_width=True,
                                type="secondary"
                            ):
                                st.session_state.regenerate_text_data = {
                                    'theme': text.get('theme', ''),
                                    'original_id': text_id
                                }
                                st.toast("Tema carregado para regenera√ß√£o!", icon="üîÑ")
                                st.switch_page("üöÄ Gerar Novo Post")

                    st.divider()

            # Navega√ß√£o de p√°ginas no final
            if total_pages > 1:
                col_nav1, col_nav2, col_nav3 = st.columns([1, 2, 1])
                with col_nav2:
                    st.info(f"üìÑ Mostrando posts {start_idx + 1} a {min(end_idx, total_posts)} de {total_posts}")

        elif 'read' not in permissions:
            st.error("""
            **üîí Acesso Restrito**

            Voc√™ n√£o possui permiss√£o para visualizar posts.
            Entre em contato com o administrador para solicitar acesso.
            """)

    def update(self, token, menu_position, permissions):
        """
        Menu com interface para atualiza√ß√£o do post.

        Parameters
        ----------
        token : str
            O token utilizado no envio da requisi√ß√£o.
        menu_position : Any
            posi√ß√£o do menu superior com a listagem dos posts.
        permissions : list
            Lista contendo as permiss√µes do usu√°rio.
        """

        if 'update' in permissions:
            texts = TextsRequest().get_texts(token)

            if not texts:
                _, col5, _ = st.columns(3)
                with col5:
                    st.info("""
                    **üìÑ Nenhum post encontrado**

                    N√£o h√° posts para edi√ß√£o.
                    """)
                return

            # Sele√ß√£o do post no menu superior
            with menu_position:
                st.markdown("### üéØ Selecionar Post")
                texts_options = {}
                for text in texts:
                    theme_preview = text['theme'][:50]
                    theme_preview += '...' if len(text['theme']) > 50 else ''
                    status = ('Aprovado' if text.get('is_approved')
                              else 'Pendente')
                    key = f"{theme_preview} ({status})"
                    texts_options[key] = text['id']

                selected_text_display = st.selectbox(
                    "Escolha o post para editar:",
                    options=list(texts_options.keys()),
                    help="Selecione um post"
                )
                selected_text_id = texts_options[selected_text_display]

            # Interface de edi√ß√£o
            text_data = TextsRequest().get_text(token, selected_text_id)

            if text_data:
                col_form, col_preview = st.columns([1, 1])

                with col_form:
                    st.subheader("üìù Dados do Post")

                    new_topic = st.text_area(
                        label="üéØ Tema",
                        value=text_data['theme'],
                        max_chars=500,
                        help="Tema do post",
                        height=100
                    )

                    status_options = {
                        True: "‚úÖ Aprovado",
                        False: "‚è≥ Pendente"
                    }

                    current_approval_status = text_data.get(
                        'is_approved', False)

                    new_status_display = st.selectbox(
                        label="üìä Status",
                        options=list(status_options.values()),
                        index=0 if current_approval_status else 1,
                        help="Status do post"
                    )

                    # Converter de volta para o valor da API
                    new_approval_status = new_status_display == "‚úÖ Aprovado"

                with col_preview:

                    st.subheader("üëÅÔ∏è Pr√©via das Altera√ß√µes")

                    # Verificar se houve mudan√ßas
                    has_changes = (
                        new_topic != text_data['theme'] or
                        new_approval_status != text_data.get('is_approved'))

                    if has_changes:
                        st.toast("Altera√ß√µes detectadas!", icon="üìù")
                    else:
                        st.toast("Nenhuma altera√ß√£o feita", icon="‚ÑπÔ∏è")

                    if new_topic:
                        topic_preview = (new_topic[:200]
                                         if len(new_topic) > 200
                                         else new_topic)
                        topic_suffix = '...' if len(new_topic) > 200 else ''
                        st.markdown(f"""
                        **üéØ Novo Tema:**
                        {topic_preview}{topic_suffix}

                        **üìä Novo Status:**
                        {status_options[new_approval_status]}

                        **üìÖ Data Original:**
                        {text_data.get('created_at', 'N/A')[:10]}

                        **üìä Caracteres:** {len(new_topic)}/500""")

                # Valida√ß√£o e bot√£o de atualiza√ß√£o
                if new_topic:
                    validated_topic, topic_data = self.validate_topic(
                        new_topic)

                    if validated_topic and has_changes:
                        _, col_btn2, _ = st.columns([1, 2, 1])

                        with col_btn2:
                            confirm_button = st.button(
                                "üíæ Salvar Altera√ß√µes",
                                use_container_width=True,
                                type="primary",
                                help="Salvar altera√ß√µes"
                            )

                            if confirm_button:
                                new_text_data = {
                                    "theme": topic_data,
                                    "is_approved": new_approval_status
                                }

                                with st.spinner("Salvando altera√ß√µes..."):
                                    returned_text = TextsRequest().update_text(
                                        token=token,
                                        text_id=text_data['id'],
                                        updated_data=new_text_data
                                    )

                                st.toast(
                                    "Post atualizado com sucesso!",
                                    icon="‚úÖ"
                                )
                                st.balloons()
                                st.toast(returned_text, icon="‚ÑπÔ∏è")
                                st.rerun()

                # √Årea de pr√©via do post completo
                with st.expander(
                    "üìÑ Visualizar Post Completo",
                    expanded=False
                ):
                    content_text = text_data.get(
                        'content', text_data.get(
                            'generated_text', 'Post n√£o dispon√≠vel'))

                    st.text_area(
                        "Conte√∫do completo do post:",
                        value=content_text,
                        height=400,
                        label_visibility="collapsed"
                    )

        elif 'update' not in permissions:
            st.warning("""
            **üîí Acesso Restrito**

            Sem permiss√£o para atualizar posts.
            """)

    def main_menu(self, token, permissions):
        """
        Menu principal da aplica√ß√£o de gera√ß√£o de posts.

        Parameters
        ----------
        token : str
            Token utilizado para as requisi√ß√µes.
        permissions : str
            Lista com as permiss√µes do usu√°rio.
        """
        class_permissions = TextsRequest().get_text_permissions(
            user_permissions=permissions
        )

        # Cabe√ßalho principal mais limpo
        _, col_menu, col_actions = st.columns([1, 1.2, 1])

        with col_menu:
            # Menu com √≠cones mais intuitivos
            menu_options = {
                "üìö Biblioteca de Posts": self.render,
                "üöÄ Gerar Novo Post": self.create,
            }

            # Verificar permiss√µes e filtrar op√ß√µes dispon√≠veis
            available_options = {}
            if 'read' in class_permissions:
                available_options["üìö Biblioteca de Posts"] = (
                    menu_options["üìö Biblioteca de Posts"]
                )
            if 'create' in class_permissions:
                available_options["üöÄ Gerar Novo Post"] = (
                    menu_options["üöÄ Gerar Novo Post"]
                )

            if available_options:
                selected_option = st.selectbox(
                    label="Escolha uma a√ß√£o:",
                    options=list(available_options.keys()),
                    help="Selecione uma op√ß√£o",
                    label_visibility="collapsed"
                )
            else:
                st.toast(
                    "Voc√™ n√£o possui permiss√µes para usar esta funcionalidade",
                    icon="‚ùå")
                return

        # Mostrar informa√ß√µes de permiss√£o
        with col_actions:
            permission_status = []
            if 'read' in class_permissions:
                permission_status.append("üëÅÔ∏è Visualizar")
            if 'create' in class_permissions:
                permission_status.append("‚ûï Criar")

        st.divider()

        # Executar a op√ß√£o selecionada
        if available_options:
            executed_option = available_options[selected_option]
            executed_option(
                token=token,
                menu_position=col_actions,
                permissions=class_permissions
            )
